import os
import sys
import openai
from dotenv import load_dotenv

class AnswerChecker:
    def __init__(self):
        load_dotenv()
        self.openai_api_key = os.getenv('OPENAI_API_KEY')
        if not self.openai_api_key:
            raise ValueError("OPENAI_API_KEY not found in environment variables")
        openai.api_key = self.openai_api_key

    def check_answer_breakability(self, question):
        prompt = f"""
        Determine if the following question can be answered directly by GPT-4 without additional context or information. Respond with 1 if it can be answered directly, or 0 if it cannot.

        Question: {question}
        """
        
        try:
            response = openai.ChatCompletion.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "You are an expert in evaluating the breakability of question-answer pairs. Assess if the answer to the given question can be generated by GPT-4 without extra context. Respond with 1 for yes, 0 for no."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.0,
                max_tokens=1,
                top_p=1,
                frequency_penalty=0,
                presence_penalty=0
            )
            return response.choices[0].message.content.strip()
        except Exception as e:
            print(f"An error occurred: {str(e)}")
            return None

    def check_answer_ambiguity(self, user_answer, correct_answer):
        prompt = f"""
        Evaluate if the user's answer is correct or close enough to the expected answer. 
        User's Answer: {user_answer}
        Expected Answer: {correct_answer}
        Respond with 1 if the user's answer is acceptable, or 0 if it is not.
        """
        
        try:
            response = openai.ChatCompletion.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "You are an expert in evaluating the correctness of answers. Determine if the user's answer is acceptable."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.0,
                max_tokens=1,
                top_p=1,
                frequency_penalty=0,
                presence_penalty=0
            )
            # Clean up the response to ensure it's either '1' or '0'
            result = response.choices[0].message.content.strip()
            if result in ['1', '0']:
                return result
            else:
                # Attempt to extract '1' or '0' from the response
                if '1' in result:
                    return '1'
                elif '0' in result:
                    return '0'
                else:
                    return '0'  # Default to '0' if uncertain
        except Exception as e:
            print(f"An error occurred: {str(e)}")
            return None

if __name__ == "__main__":
    checker = AnswerChecker()
    if len(sys.argv) == 2:
        question = sys.argv[1]
        result = checker.check_answer_breakability(question)
        print(result)
    elif len(sys.argv) == 3:
        user_answer = sys.argv[1]
        correct_answer = sys.argv[2]
        result = checker.check_answer_ambiguity(user_answer, correct_answer)
        print(result)
    else:
        sys.exit(1)