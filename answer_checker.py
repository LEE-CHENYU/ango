import os
import sys
from openai import OpenAI
from dotenv import load_dotenv

class AnswerChecker:
    def __init__(self):
        load_dotenv()
        self.openai_api_key = os.getenv('OPENAI_API_KEY')
        if not self.openai_api_key:
            raise ValueError("OPENAI_API_KEY not found in environment variables")
        self.client = OpenAI(api_key=self.openai_api_key)

    def check_answer_breakability(self, question):
        prompt = f"""
        Determine if the following question can be answered directly by GPT-4 without additional context or information. Respond with 1 if it can be answered directly, or 0 if it cannot.

        Question: {question}
        """
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "system", "content": "You are an expert in evaluating the breakability of question-answer pairs. Assess if the answer to the given question can be generated by GPT-4 without extra context. Respond with 1 for yes, 0 for no."}, {"role": "user", "content": prompt}],
                temperature=0.7,
                max_tokens=1,
                top_p=1,
                frequency_penalty=0,
                presence_penalty=0
            )
            return response.choices[0].message.content.strip()
        except Exception as e:
            print(f"An error occurred: {str(e)}")
            return None

if len(sys.argv) != 2:
    print("Usage: python3 answer_checker.py <question>")
    sys.exit(1)

question = sys.argv[1]
checker = AnswerChecker()
result = checker.check_answer_breakability(question)
print(result)
